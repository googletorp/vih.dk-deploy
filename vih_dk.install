<?php
/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function vih_dk_install() {
  _vih_add_text_formats();
  _vih_enable_blocks();
  _vih_insert_node_types();

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  _vih_create_administrator_role();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // setting up the editor
  _media_configure_wysiwyg();
  _media_configure_formatters();
  _media_add_field_description();
  _media_add_field_tags();

  $files = array();
  foreach (file_scan_directory(dirname(__FILE__) . '/files', "/.*\..*/") as $file) {
    $files[] = $file->uri;
  }
  _media_add_default_files($files);
}

function _vih_enable_blocks() {
// Enable some vih_dk blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $admin_theme = 'seven';
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'navigation',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'management',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

function _vih_add_text_formats() {
// Add text formats.
  $filtered_html_format = array(
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);
}

function _vih_insert_node_types() {
  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    )
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      )
    )
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);
}

function _vih_create_administrator_role() {
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

}

function _media_configure_wysiwyg() {
  //WYSIWYG Setup
  foreach (array(1,2) as $f) {
    $wysiwyg_setting = array ( 'default' => 1, 'user_choose' => 0, 'show_toggle' => 1, 'theme' => 'advanced', 'language' => 'en', 'wysiwyg_buttons' => array ( 'default' => array ( 'Bold' => 1, 'Italic' => 1, 'Underline' => 0, 'Strike' => 0, 'JustifyLeft' => 0, 'JustifyCenter' => 0, 'JustifyRight' => 0, 'JustifyBlock' => 0, 'BulletedList' => 1, 'NumberedList' => 1, 'Outdent' => 0, 'Indent' => 0, 'Undo' => 0, 'Redo' => 1, 'Link' => 1, 'Unlink' => 1, 'Anchor' => 0, 'Image' => 0, 'TextColor' => 0, 'BGColor' => 0, 'Superscript' => 0, 'Subscript' => 0, 'Blockquote' => 1, 'Source' => 0, 'HorizontalRule' => 0, 'Cut' => 0, 'Copy' => 0, 'Paste' => 0, 'PasteText' => 0, 'PasteFromWord' => 0, 'ShowBlocks' => 0, 'RemoveFormat' => 0, 'SpecialChar' => 0, 'About' => 0, 'Format' => 1, 'Font' => 0, 'FontSize' => 0, 'Styles' => 0, 'Table' => 0, 'Find' => 0, 'Replace' => 0, 'SelectAll' => 0, 'Flash' => 0, 'Smiley' => 0, 'Maximize' => 0, 'SpellChecker' => 0, 'Scayt' => 0, ), 'drupal' => array ( 'media' => 1, 'break' => 0, ), ), 'toolbar_loc' => 'top', 'toolbar_align' => 'left', 'path_loc' => 'bottom', 'resizing' => 1, 'verify_html' => 1, 'preformatted' => 0, 'convert_fonts_to_spans' => 1, 'remove_linebreaks' => 1, 'apply_source_formatting' => 0, 'paste_auto_cleanup_on_paste' => 0, 'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div', 'css_setting' => 'theme', 'css_path' => '', 'css_classes' => '', 'buttons' => array ( 'default' => array ( 'Bold' => 1, 'Italic' => 1, ), 'drupal' => array ( 'media' => 1, ), ), );
    db_merge('wysiwyg')
      ->key(array('format' => $f))
      ->fields(array(
        'editor' => 'ckeditor',
        'settings' => serialize($wysiwyg_setting),
      ))
      ->execute();
  }
}

function _media_configure_formatters() {
  foreach (array(1,2) as $f) {
    $format = filter_format_load($f);
    $format->filters['media_filter'] = array(
      'status' => 1,
      'weight' => 10,
    );
    filter_format_save($format);
  }
}

function _media_add_default_files($files) {
  $defaults = array (
    'display' => TRUE,  );

  foreach ($files as $filename) {
    $scheme = variable_get('file_default_scheme', 'public') . '://';
    $destination = file_stream_wrapper_uri_normalize($scheme . basename($filename));
    
    $file = file_save_data(file_get_contents($filename), $destination);
  }
}

/**
 * Adds the tags field to all media bundles.
 */
function _media_add_field_tags() {
  foreach (media_type_get_types() as $bundle => $type) {
    $instance = array(
      'field_name' => 'field_tags',
      'entity_type' => 'media',
      'bundle' => $bundle,
      'label' => 'Tags',
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
      ),

      // @todo: implement this.
      //'display' => array();
    );
    field_create_instance($instance);
  }
}

/**
 * Adds a description field to all media bundles.
 * @todo: do this.
 */
function _media_add_field_description() {

  $field = array(
    'field_name' => 'media_description',
    'type' => 'text_long',
    'translatable' => TRUE,
  );
  field_create_field($field);

  foreach (media_type_get_types() as $bundle => $type) {
    $instance = array(
      'field_name' => 'media_description',
      'entity_type' => 'media',
      'bundle' => $bundle,
      'label' => 'Description',
      // @todo: implement this.
      //'display' => array();
    );
    field_create_instance($instance);
  }
}